// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "userId")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userPost      UserPost[]  @relation("userPost") // Add this line for the relation with UserPost
  voteCounts    VoteCount[] @relation("userVote") // Add this line for the relation with VoteCount
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPost {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  content   String // The actual text input
  userId    String // Foreign key to the User model
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, name: "userPost")
  votes     VoteCount[] @relation("postVote") // Add this line for the relation with Vote

  @@unique([userId, content])
}

model VoteCount {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  userPostId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "userVote")
  userPost   UserPost @relation(fields: [userPostId], references: [id], onDelete: Cascade, name: "postVote")

  @@unique([userId, userPostId])
  @@index([userPostId])
}
